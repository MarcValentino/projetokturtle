/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -m -a interpreteradaptor -i interpreter/interpreter.h -l Interpreter /home/marcelo/projetokturtle/src/interpreter/org.kde.kturtle.Interpreter.xml
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef INTERPRETERADAPTOR_H
#define INTERPRETERADAPTOR_H

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
#include "interpreter/interpreter.h"
QT_BEGIN_NAMESPACE
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;
QT_END_NAMESPACE

/*
 * Adaptor class for interface org.kde.kturtle.Interpreter
 */
class InterpreterAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "org.kde.kturtle.Interpreter")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"org.kde.kturtle.Interpreter\">\n"
"    <signal name=\"parsing\"/>\n"
"    <signal name=\"executing\"/>\n"
"    <signal name=\"finished\"/>\n"
"    <method name=\"interpret\"/>\n"
"    <method name=\"state\">\n"
"      <arg direction=\"out\" type=\"i\"/>\n"
"    </method>\n"
"    <method name=\"initialize\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"inputString\"/>\n"
"    </method>\n"
"    <method name=\"encounteredErrors\">\n"
"      <arg direction=\"out\" type=\"b\"/>\n"
"    </method>\n"
"    <method name=\"getErrorStrings\">\n"
"      <arg direction=\"out\" type=\"as\"/>\n"
"    </method>\n"
"  </interface>\n"
        "")
public:
    InterpreterAdaptor(Interpreter *parent);
    virtual ~InterpreterAdaptor();

    inline Interpreter *parent() const
    { return static_cast<Interpreter *>(QObject::parent()); }

public: // PROPERTIES
public Q_SLOTS: // METHODS
    bool encounteredErrors();
    QStringList getErrorStrings();
    void initialize(const QString &inputString);
    void interpret();
    int state();
Q_SIGNALS: // SIGNALS
    void executing();
    void finished();
    void parsing();
};

#endif
